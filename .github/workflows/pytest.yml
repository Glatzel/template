name: pytest

on:
  workflow_call:
    inputs:
      name:
        description: Name of the test.
        required: true
        type: string
      machine:
        description: The machine that this workflow will run on.
        required: true
        type: string
      update_submodule:
        description: Whether to clone submodule.
        type: boolean
        default: false
      submodule_path:
        description: "Clone specific submodule(s). example: -- Amodule Bmodule"
        type: string
        default: ""
      pre_test_command:
        type: string
        default: ""
      test_path:
        description: The path that contains test files.
        default: ./tests
        type: string
      pixi_python_env:
        description: This input will pass to pixi -e parameter.
        type: string
        default: default
      locked:
        type: boolean
        default: false
      test_args:
        description: Additional Pytest args.
        type: string
        default: ""
    secrets:
      CODECOV_TOKEN:
        required: true
env:
  PIXI_LOCKED: ${{inputs.locked}}
jobs:
  pytest:
    runs-on: ${{inputs.machine}}
    steps:
      # setup
      - uses: actions/checkout@v4

      - name: Update Submodule
        if: ${{ inputs.update_submodule }}
        run: git submodule update --init --recursive ${{ inputs.submodule_path }}

      - uses: actions/cache/restore@v4
        with:
          path: .pixi
          key: pixi-${{inputs.pixi_python_env}}-${{ runner.os }}-${{ hashFiles('**/pixi.lock') }}
          restore-keys: |
            pixi-${{inputs.pixi_python_env}}-${{ runner.os }}

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.3
        with:
          run-install: false

      # test
      - name: pre-test
        if: ${{inputs.pre_test_command != ''}}
        run: ${{inputs.pre_test_command}}

      - name: pytest
        if: success()
        run: |
          pixi run -e ${{inputs.pixi_python_env}} pytest `
          "${{inputs.test_path}}" `
          --durations=0 `
          --junitxml=junit.xml -o junit_family=legacy `
          --cov --cov-report=xml `
          ${{inputs.test_args}}

      - name: Upload cov results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
